spring.application.name=spring-boot-examples
server.port=8080
# SSL配置
#server.port=8443
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password=secret
#server.ssl.key-password=another-secret
security.user.name=admin
security.user.password=123456
endpoints.shutdown.enabled=true
management.security.enabled=false
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8
spring.messages.encoding=UTF-8
# 支持HTTP响应压缩
server.compression.enabled=true
# 默认情况下，响应的长度必须至少为2048字节才能执行压缩
#server.compression.min-response-size=
# 默认情况下，html、xml、plain、css、js才会被压缩
#server.compression.mime-types=
# Allow Thymeleaf templates to be reloaded at dev time
spring.thymeleaf.cache=false
server.tomcat.accesslog.enabled=true
server.tomcat.basedir=target/tomcat
# DataSource
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql://127.0.0.1:3306/easyui
spring.datasource.druid.username=root
spring.datasource.druid.password=123456
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化时建立物理连接的个数,默认值为0
spring.datasource.druid.initial-size=5
# 最小连接池数量
spring.datasource.druid.min-idle=5
# 最大连接池数量，默认值为8
spring.datasource.druid.max-active=20
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait=60000
# 是否缓存preparedStatement，也就是PSCache,默认为false。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
#spring.datasource.druid.max-open-prepared-statements=
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
spring.datasource.druid.validation-query-timeout=30000
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认为true。
spring.datasource.druid.test-on-borrow=true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认为false。
spring.datasource.druid.test-on-return=false
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。默认为false。
spring.datasource.druid.test-while-idle=true
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
# 默认值为1分钟
#spring.datasource.druid.time-between-eviction-runs-millis=
# 连接保持空闲而不被驱逐的最小时间，默认值3分钟。
#spring.datasource.druid.min-evictable-idle-time-millis=
# 连接保持空闲而不被驱逐的最大时间，默认值42分钟。
#spring.datasource.druid.max-evictable-idle-time-millis=
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.useGlobalDataSourceStat=true
# WebStatFilter配置，说明请参考Druid Wiki，配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
# 排除不必要的url
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
# session统计功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
# 缺省sessionStatMaxCount是1000个
spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
# 配置principalSessionName，使得druid能够知道当前的session的用户是谁
#spring.datasource.druid.web-stat-filter.principal-session-name=
# 配置principalCookieName，使得druid知道当前的user是谁
#spring.datasource.druid.web-stat-filter.principal-cookie-name=
# 配置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true
# StatViewServlet配置，说明请参考Druid Wiki，配置StatViewServlet
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=true
spring.datasource.druid.stat-view-servlet.login-username=admin
spring.datasource.druid.stat-view-servlet.login-password=admin
# 如果allow没有配置或者为空，则允许所有访问
#spring.datasource.druid.stat-view-servlet.allow=
# deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。
#spring.datasource.druid.stat-view-servlet.deny=
# Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
# Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
# 与quartz注入起冲突，关闭
#spring.aop.proxy-target-class=true
#spring.datasource.druid.aop-patterns=cn.kenenjoy.*

# Redis (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
#spring.redis.host=127.0.0.1
# Redis服务器连接端口
#spring.redis.port=7001
# Redis服务器连接密码（默认为空）
spring.redis.password=password
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=20
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=30000
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=1
# 连接超时时间（毫秒）
spring.redis.timeout=30000
# name of Redis server  哨兵监听的Redis server的名称
spring.redis.sentinel.master=mymaster
# comma-separated list of host:port pairs  哨兵的配置列表
spring.redis.sentinel.nodes=127.0.0.1:26379,127.0.0.1:26380,127.0.0.1:26381
# 配置Redis Cluster节点
#spring.redis.cluster.nodes[0]=127.0.0.1:7001
#spring.redis.cluster.nodes[1]=127.0.0.1:7002
#spring.redis.cluster.nodes[2]=127.0.0.1:7003
#spring.redis.cluster.nodes[3]=127.0.0.1:8001
#spring.redis.cluster.nodes[4]=127.0.0.1:8002
#spring.redis.cluster.nodes[5]=127.0.0.1:8003
# 在执行配置Redis命令时遵循的重定向的最大数目
#spring.redis.cluster.max-redirects=6

# Mail
spring.mail.properties.mail.smtp.connectiontimeout=30000
spring.mail.properties.mail.smtp.timeout=30000
spring.mail.properties.mail.smtp.writetimeout=30000
spring.mail.host=mail.ziyatech.com
spring.mail.username=hefa@ziyatech.com
spring.mail.password=123456
spring.mail.default-encoding=UTF-8
spring.mail.from.addr=hefa@ziyatech.com

# ActiveMQ
spring.activemq.broker-url=tcp://127.0.0.1:61618
spring.activemq.user=admin
spring.activemq.password=admin
spring.activemq.pool.enabled=true
spring.activemq.pool.max-connections=50

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup